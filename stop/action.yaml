name: 'Falco Action Stop'
description: 'Run Falco in a GitHub Action'
author: 'The Falco Authors'
inputs:
  mode:
    description: 'Stop action with a mode. Can be live or analyze'
    type: choice
    options:
      - live
      - analyze
    required: false
    default: 'live'
  verbose:
    description: "Enable verbose logs"
    type: boolean
    default: false
runs:
  using: 'composite'
  steps:
  - name: Stop Falco or Sysdig containers
    shell: bash
    continue-on-error: true
    env:
      VERBOSE: ${{ inputs.verbose }}
    run: |
      if [[ "$VERBOSE" == "true" ]]; then
        set -x
      fi

      echo "Stopping Falco or Sysdig containers"
      if docker ps --format '{{.Names}}' | grep -qE '^(falco|sysdig)$'; then
          docker stop $(docker ps -q --filter name='^falco$' --filter name='^sysdig$')
      fi
  
  - name: Retrieve Job Info using GitHub API
    shell: bash
    if: ${{ inputs.mode == 'live' }}
    env:
      RUN_ID: ${{ github.run_id }}
      REPO: ${{ github.repository }}
      GITHUB_TOKEN: ${{ github.token }}
      VERBOSE: ${{ inputs.verbose }}
    run: |
      # If we are in live mode, we need to retrieve the job details to get the steps with timestamps
      # This is useful to understand in which step the security event occured and requires to access the GitHub API
      if [[ "$VERBOSE" == "true" ]]; then
        set -x
      fi

      echo "Retrieving details for run_id=$RUN_ID"
      curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs > jobs.json
      
      cat jobs.json
      
      # Parse JSON and retrieve step info with timestamps
      echo "Job details:"
      jq -c '.jobs[] | {job_id: .id, job_name: .name, steps: .steps[] | {name: .name, started_at: .started_at, completed_at: .completed_at, status: .status}}' jobs.json > steps.json

      if [[ "$VERBOSE" == "true" ]]; then
        cat steps.json
      fi
      mv steps.json /tmp/steps.json

  - name: Build Live Summary
    if: ${{ inputs.mode == 'live' }}
    shell: bash
    env:
      RUN_ID: ${{ github.run_id }}
      REPO: ${{ github.repository }}
      VERBOSE: ${{ inputs.verbose }}
      ACTION_PATH: ${{ github.action_path }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
      OWNER: ${{ github.repository_owner }}
    run: |
      if [[ "$VERBOSE" == "true" ]]; then
        set -x
      fi

      python3 -m pip install -r $ACTION_PATH/../common/requirements.txt
      ls -al /tmp
      # Falco events
      if [[ -s /tmp/falco_events.json ]]; then
        echo "Printing triggered rules in Job summary"
        echo "# Report Details" >> /tmp/report_output.md
        echo "## Falco Events" >> /tmp/report_output.md
        content=$(python3 $ACTION_PATH/../common/falco_events_to_md.py /tmp/falco_events.json /tmp/steps.json)
        echo "$content" >> /tmp/report_output.md
        cat /tmp/report_output.md
      
        # Create PR comment with triggered rules, else append to summary
        if ${{ github.event_name == 'pull_request' }}; then
          echo "Creating PR comment with triggered signatures"
          FILE_CONTENT=$(echo "$content" | sed 's/\\/\\\\/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"***Falco Rules*** \\n\\n ${FILE_CONTENT} \\n\\n Find out more at https://github.com/$REPO/actions/runs/$RUN_ID\"}" \
            https://api.github.com/repos/$OWNER/$REPO/issues/$PULL_REQUEST_NUMBER/comments
        fi
        cat /tmp/report_output.md >> $GITHUB_STEP_SUMMARY
      fi
  
  - name: Upload Capture for Analyze mode
    if: ${{ inputs.mode == 'analyze' }}
    uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    with:
      name: capture
      path: /tmp/capture.scap

  - name: Extract executables' hash
    if: ${{ inputs.mode == 'analyze' }}
    shell: bash
    env:
      VERBOSE: ${{ inputs.verbose }}
      ACTION_PATH: ${{ github.action_path }}
    run: |      
      if [[ "${VERBOSE}" == "true" ]]; then
        set -x
      fi
      PROC_FILTER="evt.type in (execve, execveat) and evt.dir=< and evt.arg.res=0"
      PROC_FILTER_OUTPUT="%proc.name,%proc.exepath,%proc.pname,%proc.pexepath,%user.name"
      $ACTION_PATH/../common/run_sysdig.sh filter "/tmp/capture.scap" "$PROC_FILTER" "$PROC_FILTER_OUTPUT" "/tmp/proc.txt"
      cat /tmp/proc.txt | jq '."proc.exepath"' | tr -d "\"" | while read -r file; do
        if [ -f "$file" ]; then
            line=$(sha256sum "$file")
            sha=$(echo "$line" | awk '{print $1}')
            file=$(echo "$line" | awk '{print $2}')
            echo "{ \"sha256\": \"$sha\", \"filename\": \"$file\" }"
        else
            echo "Warning: File $file does not exist anymore when extracting its SHA256 hash" >&2
        fi 
      done > /tmp/hashes.txt

      sort -u -o /tmp/hashes.txt /tmp/hashes.txt

  - name: Upload Hashes
    if: ${{ inputs.mode == 'analyze' }}
    uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
    with:
      name: hashes
      path: /tmp/hashes.txt
